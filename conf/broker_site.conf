#upstream broker {
 # fail_timeout=0 means we always retry an upstream even if it failed
 # to return a good HTTP response

 # Unix domain servers
# server unix:/tmp/broker_1.sock fail_timeout=0;
 # server unix:/tmp/broker_2.sock fail_timeout=0;
#}

# HTTP server
server {
  listen 80;

  # Endpoint used for performing domain verification with Let's Encrypt.
  location /.well-known/acme-challenge/ {
    content_by_lua_block {
      auto_ssl:challenge_server()
    }
  }
}

# Internal server running on port 8999 for handling certificate tasks.
server {
  listen 127.0.0.1:8999;
  # Increase the body buffer size, to ensure the internal POSTs can always
  # parse the full POST contents into memory.
  client_body_buffer_size 128k;
  client_max_body_size 128k;

  location / {
    content_by_lua_block {
      auto_ssl:hook_server()
    }
  }
}

server {
  client_max_body_size 4G;

  listen              443 ssl;
  keepalive_timeout   70;

  # Dynamic handler for issuing or returning certs for SNI domains.
  ssl_certificate_by_lua_block {
    auto_ssl:ssl_certificate()
  }
  ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
  ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
  ssl_ecdh_curve secp384r1;
  ssl_session_cache shared:SSL:10m;
  ssl_session_tickets off;
  ssl_stapling on;
  ssl_stapling_verify on;

  # Uncomment the following 3 lines if external account bindings via client certificates are to be used
  # ssl_client_certificate /etc/ssl/trusted_roots.pem;
  # ssl_verify_client optional;
  # ssl_verify_depth 3;

  # resolver 8.8.8.8 8.8.4.4 valid=300s;
  # resolver_timeout 5s;
  # Disable preloading HSTS for now.  You can use the commented out header line that includes
  # the "preload" directive if you understand the implications.
  #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
  add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff;

  location / {
    proxy_pass http://localhost:8180/;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
    proxy_buffering off;
  }

  location /eab {
    proxy_pass http://localhost:8180/eab;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
    proxy_buffering off;

    proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;
  }
}
